---@diagnostic disable: missing-fields

local vkzlib = Vkz.vkzlib
local default = require("profiles.default")
local options = require("profiles.options")

local catppuccin_opts = {}

catppuccin_opts.plastilin_frappe_vkz = {
  background = {
    light = "latte",
    dark = "mocha",
  },
  color_overrides = {
    mocha = {
      rosewater = "#FB4834",
      flamingo = "#FB4834",
      red = "#FB4834",
      maroon = "#FB4834",
      pink = "#d3859b",
      mauve = "#d3859b",
      peach = "#e78a4e",
      yellow = "#FBBD2E",
      green = "#8dc07c",
      teal = "#B9BB25",
      sky = "#99c792",
      sapphire = "#99c792",
      blue = "#8dbba3",
      lavender = "#8dbba3",
      text = "#f1e4c2",
      subtext2 = "#c5b4a1",
      subtext1 = "#d5c4a1",
      subtext0 = "#bdae93",
      overlay2 = "#a89984",
      overlay1 = "#928374",
      overlay0 = "#595959",
      surface2 = "#4d4d4d",
      surface1 = "#404040",
      surface0 = "#292929",
      base = "#1d2224",
      mantle = "#1d2224",
      crust = "#1f2223",
    },
    frappe = {
      rosewater = "#eb7a73",
      flamingo = "#eb7a73",
      red = "#eb7a73",
      maroon = "#eb7a73",
      pink = "#e396a4",
      mauve = "#e396a4",
      peach = "#e89a5e",
      yellow = "#E7B84C",
      green = "#7cb66a",
      teal = "#99c792",
      sky = "#99c792",
      sapphire = "#99c792",
      blue = "#8dbba3",
      lavender = "#8dbba3",
      text = "#f1e4c2",
      subtext1 = "#e5d5b1",
      subtext0 = "#c5bda3",
      overlay2 = "#b8a994",
      overlay1 = "#a39284",
      overlay0 = "#656565",
      surface2 = "#5d5d5d",
      surface1 = "#505050",
      surface0 = "#393939",
      base = "#1d2224",
      mantle = "#1d2224",
      crust = "#1f2223",
    },
  },
  transparent_background = true,
  show_end_of_buffer = false,
  integration_default = false,
  integrations = {
    alpha = true,
    -- barbecue = { dim_dirname = true, bold_basename = true, dim_context = false, alt_background = false },
    cmp = true,
    dap = true,
    dap_ui = true,
    gitsigns = true,
    -- hop = true,
    illuminate = {
      enabled = true,
      lsp = true
    },
    indent_blankline = {
      enabled = true,
      scope_color = "", -- catppuccin color (eg. `lavender`) Default: text
      colored_indent_levels = false,
    },
    lsp_saga = true,
    lsp_trouble = true,
    markdown = true,
    mason = true,
    mini = {
      enabled = true,
      indentscope_color = "",
    },
    native_lsp = {
      enabled = true,
      virtual_text = {
        errors = { "italic" },
        hints = { "italic" },
        warnings = { "italic" },
        information = { "italic" },
        ok = { "italic" },
      },
      underlines = {
        errors = { "underline" },
        hints = { "underline" },
        warnings = { "underline" },
        information = { "underline" },
        ok = { "underline" },
      },
      inlay_hints = {
        background = true,
      },
    },
    -- neogit = true,
    -- neotree = true,
    notify = true,
    nvimtree = true,
    rainbow_delimiters = true,
    render_markdown = true,
    semantic_tokens = true,
    telescope = {
      enabled = true,
      -- style = "nvchad"
    },
    treesitter = true,
    treesitter_context = true,
    ufo = true,
    -- vimwiki = true,
    which_key = true,
  },
  highlight_overrides = {
    all = function(colors)
      return {
        CmpItemMenu = { fg = colors.surface2 },
        CursorLineNr = { fg = colors.text },
        FloatBorder = { bg = colors.base, fg = colors.subtext1 }, -- colors.surface0 }, difficult to see
        GitSignsChange = { fg = colors.peach },
        LineNr = { fg = colors.overlay0 },
        LspInfoBorder = { link = "FloatBorder" },
        NeoTreeDirectoryIcon = { fg = colors.subtext1 },
        NeoTreeDirectoryName = { fg = colors.subtext1 },
        NeoTreeFloatBorder = { bg = colors.mantle, fg = colors.mantle },
        NeoTreeGitConflict = { fg = colors.red },
        NeoTreeGitDeleted = { fg = colors.red },
        NeoTreeGitIgnored = { fg = colors.overlay0 },
        NeoTreeGitModified = { fg = colors.peach },
        NeoTreeGitStaged = { fg = colors.green },
        NeoTreeGitUnstaged = { fg = colors.red },
        NeoTreeGitUntracked = { fg = colors.green },
        NeoTreeIndent = { fg = colors.surface1 },
        NeoTreeNormal = { bg = colors.mantle },
        NeoTreeNormalNC = { bg = colors.mantle },
        NeoTreeRootName = { fg = colors.subtext1, style = { "bold" } },
        NeoTreeTabActive = { fg = colors.text, bg = colors.mantle },
        NeoTreeTabInactive = { fg = colors.surface2, bg = colors.crust },
        NeoTreeTabSeparatorActive = { fg = colors.mantle, bg = colors.mantle },
        NeoTreeTabSeparatorInactive = { fg = colors.crust, bg = colors.crust },
        NeoTreeWinSeparator = { fg = colors.surface1, bg = colors.base },
        NormalFloat = { bg = colors.base },
        Pmenu = { bg = colors.mantle, fg = "" },
        -- telescope prompt
        TelescopePromptTitle = { fg = colors.mantle, bg = "#39fd9c", style = { "bold" } },
        TelescopePromptCounter = { fg = colors.red, style = { "bold" } },
        TelescopePromptBorder = { bg = colors.base },
        -- telescope results
        TelescopeResultsTitle = { link = "TelescopePromptTitle" },
        TelescopeResultsBorder = { link = "TelescopePromptBorder" },
        -- telescope preview
        TelescopePreviewTitle = { link = "TelescopePromptTitle" },
        TelescopePreviewBorder = { link = "TelescopePromptBorder" },
        VertSplit = { bg = colors.base, fg = colors.surface0 },
        WhichKeyFloat = { bg = colors.mantle },
        YankHighlight = { bg = colors.surface2 },
        FidgetTask = { fg = colors.subtext2 },
        FidgetTitle = { fg = colors.peach },

        IblIndent = { fg = colors.surface0 },
        IblScope = { fg = colors.overlay0 },

        Boolean = { fg = colors.mauve },
        Number = { fg = colors.mauve },
        Float = { fg = colors.mauve },

        PreProc = { fg = colors.mauve },
        PreCondit = { fg = colors.mauve },
        Include = { fg = colors.mauve },
        Define = { fg = colors.mauve },
        Conditional = { fg = colors.red },
        Repeat = { fg = colors.red },
        Keyword = { fg = colors.red },
        Typedef = { fg = colors.red },
        Exception = { fg = colors.red },
        Statement = { fg = colors.red },

        Error = { fg = colors.red },
        StorageClass = { fg = colors.peach },
        Tag = { fg = colors.peach },
        Label = { fg = colors.peach },
        Structure = { fg = colors.peach },
        Operator = { fg = colors.sapphire },
        Title = { fg = colors.peach },
        Special = { fg = colors.yellow },
        SpecialChar = { fg = colors.yellow },
        Type = { fg = colors.yellow, style = { "bold" } },
        Function = { fg = colors.green, style = { "bold" } },
        Delimiter = { fg = colors.subtext2 },
        Ignore = { fg = colors.subtext2 },
        Macro = { fg = colors.teal },

        TSAnnotation = { fg = colors.mauve },
        TSAttribute = { fg = colors.mauve },
        TSBoolean = { fg = colors.mauve },
        TSCharacter = { fg = colors.teal },
        TSCharacterSpecial = { link = "SpecialChar" },
        TSComment = { link = "Comment" },
        TSConditional = { fg = colors.red },
        TSConstBuiltin = { fg = colors.mauve },
        TSConstMacro = { fg = colors.mauve },
        TSConstant = { fg = colors.text },
        TSConstructor = { fg = colors.green },
        TSDebug = { link = "Debug" },
        TSDefine = { link = "Define" },
        TSEnvironment = { link = "Macro" },
        TSEnvironmentName = { link = "Type" },
        TSError = { link = "Error" },
        TSException = { fg = colors.red },
        TSField = { fg = colors.blue },
        TSFloat = { fg = colors.mauve },
        TSFuncBuiltin = { fg = colors.green },
        TSFuncMacro = { fg = colors.green },
        TSFunction = { fg = colors.green },
        TSFunctionCall = { fg = colors.green },
        TSInclude = { fg = colors.red },
        TSKeyword = { fg = colors.red },
        TSKeywordFunction = { fg = colors.red },
        TSKeywordOperator = { fg = colors.sapphire },
        TSKeywordReturn = { fg = colors.red },
        TSLabel = { fg = colors.peach },
        TSLiteral = { link = "String" },
        TSMath = { fg = colors.blue },
        TSMethod = { fg = colors.green },
        TSMethodCall = { fg = colors.green },
        TSNamespace = { fg = colors.yellow },
        TSNone = { fg = colors.text },
        TSNumber = { fg = colors.mauve },
        -- TSOperator = { fg = colors.sapphire },
        TSOperator = { fg = colors.peach },
        TSParameter = { fg = colors.text },
        TSParameterReference = { fg = colors.text },
        TSPreProc = { link = "PreProc" },
        TSProperty = { fg = colors.blue },
        TSPunctBracket = { fg = colors.text },
        TSPunctDelimiter = { link = "Delimiter" },
        TSPunctSpecial = { fg = colors.blue },
        TSRepeat = { fg = colors.red },
        TSStorageClass = { fg = colors.peach },
        TSStorageClassLifetime = { fg = colors.peach },
        TSStrike = { fg = colors.subtext2 },
        TSString = { fg = colors.teal },
        TSStringEscape = { fg = colors.green },
        TSStringRegex = { fg = colors.green },
        TSStringSpecial = { link = "SpecialChar" },
        TSSymbol = { fg = colors.text },
        TSTag = { fg = colors.peach },
        TSTagAttribute = { fg = colors.green },
        TSTagDelimiter = { fg = colors.green },
        TSText = { fg = colors.green },
        TSTextReference = { link = "Constant" },
        TSTitle = { link = "Title" },
        TSTodo = { link = "Todo" },
        TSType = { fg = colors.yellow, style = { "bold" } },
        TSTypeBuiltin = { fg = colors.yellow, style = { "bold" } },
        TSTypeDefinition = { fg = colors.yellow, style = { "bold" } },
        TSTypeQualifier = { fg = colors.peach, style = { "bold" } },
        TSURI = { fg = colors.blue },
        TSVariable = { fg = colors.text },
        TSVariableBuiltin = { fg = colors.mauve },

        ["@annotation"] = { link = "TSAnnotation" },
        ["@attribute"] = { link = "TSAttribute" },
        ["@boolean"] = { link = "TSBoolean" },
        ["@character"] = { link = "TSCharacter" },
        ["@character.special"] = { link = "TSCharacterSpecial" },
        ["@comment"] = { link = "TSComment" },
        ["@conceal"] = { link = "Grey" },
        ["@conditional"] = { link = "TSConditional" },
        ["@constant"] = { link = "TSConstant" },
        ["@constant.builtin"] = { link = "TSConstBuiltin" },
        ["@constant.macro"] = { link = "TSConstMacro" },
        ["@constructor"] = { link = "TSConstructor" },
        ["@debug"] = { link = "TSDebug" },
        ["@define"] = { link = "TSDefine" },
        ["@error"] = { link = "TSError" },
        ["@exception"] = { link = "TSException" },
        ["@field"] = { link = "TSField" },
        ["@float"] = { link = "TSFloat" },
        ["@function"] = { link = "TSFunction" },
        ["@function.builtin"] = { link = "TSFuncBuiltin" },
        ["@function.call"] = { link = "TSFunctionCall" },
        ["@function.macro"] = { link = "TSFuncMacro" },
        ["@include"] = { link = "TSInclude" },
        ["@keyword"] = { link = "TSKeyword" },
        ["@keyword.function"] = { link = "TSKeywordFunction" },
        ["@keyword.operator"] = { link = "TSKeywordOperator" },
        ["@keyword.return"] = { link = "TSKeywordReturn" },
        ["@label"] = { link = "TSLabel" },
        ["@math"] = { link = "TSMath" },
        ["@method"] = { link = "TSMethod" },
        ["@method.call"] = { link = "TSMethodCall" },
        ["@namespace"] = { link = "TSNamespace" },
        ["@none"] = { link = "TSNone" },
        ["@number"] = { link = "TSNumber" },
        ["@operator"] = { link = "TSOperator" },
        ["@parameter"] = { link = "TSParameter" },
        ["@parameter.reference"] = { link = "TSParameterReference" },
        ["@preproc"] = { link = "TSPreProc" },
        ["@property"] = { link = "TSProperty" },
        ["@punctuation.bracket"] = { link = "TSPunctBracket" },
        ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
        ["@punctuation.special"] = { link = "TSPunctSpecial" },
        ["@repeat"] = { link = "TSRepeat" },
        ["@storageclass"] = { link = "TSStorageClass" },
        ["@storageclass.lifetime"] = { link = "TSStorageClassLifetime" },
        ["@strike"] = { link = "TSStrike" },
        ["@string"] = { link = "TSString" },
        ["@string.escape"] = { link = "TSStringEscape" },
        ["@string.regex"] = { link = "TSStringRegex" },
        ["@string.special"] = { link = "TSStringSpecial" },
        ["@symbol"] = { link = "TSSymbol" },
        ["@tag"] = { link = "TSTag" },
        ["@tag.attribute"] = { link = "TSTagAttribute" },
        ["@tag.delimiter"] = { link = "TSTagDelimiter" },
        ["@text"] = { link = "TSText" },
        ["@text.danger"] = { link = "TSDanger" },
        ["@text.diff.add"] = { link = "diffAdded" },
        ["@text.diff.delete"] = { link = "diffRemoved" },
        ["@text.emphasis"] = { link = "TSEmphasis" },
        ["@text.environment"] = { link = "TSEnvironment" },
        ["@text.environment.name"] = { link = "TSEnvironmentName" },
        ["@text.literal"] = { link = "TSLiteral" },
        ["@text.math"] = { link = "TSMath" },
        ["@text.note"] = { link = "TSNote" },
        ["@text.reference"] = { link = "TSTextReference" },
        ["@text.strike"] = { link = "TSStrike" },
        ["@text.strong"] = { link = "TSStrong" },
        ["@text.title"] = { link = "TSTitle" },
        ["@text.todo"] = { link = "TSTodo" },
        ["@text.todo.checked"] = { link = "Green" },
        ["@text.todo.unchecked"] = { link = "Ignore" },
        ["@text.underline"] = { link = "TSUnderline" },
        ["@text.uri"] = { link = "TSURI" },
        ["@text.warning"] = { link = "TSWarning" },
        ["@todo"] = { link = "TSTodo" },
        ["@type"] = { link = "TSType" },
        ["@type.builtin"] = { link = "TSTypeBuiltin" },
        ["@type.definition"] = { link = "TSTypeDefinition" },
        ["@type.qualifier"] = { link = "TSTypeQualifier" },
        ["@uri"] = { link = "TSURI" },
        ["@variable"] = { link = "TSVariable" },
        ["@variable.builtin"] = { link = "TSVariableBuiltin" },

        ["@lsp.type.class"] = { link = "TSType" },
        ["@lsp.type.comment"] = { link = "TSComment" },
        ["@lsp.type.decorator"] = { link = "TSFunction" },
        ["@lsp.type.enum"] = { link = "TSType" },
        ["@lsp.type.enumMember"] = { link = "TSProperty" },
        ["@lsp.type.events"] = { link = "TSLabel" },
        ["@lsp.type.function"] = { link = "TSFunction" },
        ["@lsp.type.interface"] = { link = "TSType" },
        ["@lsp.type.keyword"] = { link = "TSKeyword" },
        ["@lsp.type.macro"] = { link = "TSConstMacro" },
        ["@lsp.type.method"] = { link = "TSMethod" },
        ["@lsp.type.modifier"] = { link = "TSTypeQualifier" },
        ["@lsp.type.namespace"] = { link = "TSNamespace" },
        ["@lsp.type.number"] = { link = "TSNumber" },
        ["@lsp.type.operator"] = { link = "TSOperator" },
        ["@lsp.type.parameter"] = { link = "TSParameter" },
        ["@lsp.type.property"] = { link = "TSProperty" },
        ["@lsp.type.regexp"] = { link = "TSStringRegex" },
        ["@lsp.type.string"] = { link = "TSString" },
        ["@lsp.type.struct"] = { link = "TSType" },
        ["@lsp.type.type"] = { link = "TSType" },
        ["@lsp.type.typeParameter"] = { link = "TSTypeDefinition" },
        ["@lsp.type.variable"] = { link = "TSVariable" },
      }
    end,
    latte = function(colors)
      return {
        IblIndent = { fg = colors.mantle },
        IblScope = { fg = colors.surface1 },

        LineNr = { fg = colors.surface1 },
      }
    end,
  },
}

-- https://user-images.githubusercontent.com/6130147/197564904-04b8644e-d0c9-4357-97ea-b4131e96b9b0.png
-- Source: https://github.com/catppuccin/nvim/discussions/323#discussioncomment-3952454
catppuccin_opts.pinkish = {
  color_overrides = {
    mocha = {
      text = "#F4CDE9",
      subtext1 = "#DEBAD4",
      subtext0 = "#C8A6BE",
      overlay2 = "#B293A8",
      overlay1 = "#9C7F92",
      overlay0 = "#866C7D",
      surface2 = "#705867",
      surface1 = "#5A4551",
      surface0 = "#44313B",

      base = "#352939",
      mantle = "#211924",
      crust = "#1a1016",
    },
  }
}

-- https://user-images.githubusercontent.com/31539177/278674063-f3e66e2b-b4bd-4cde-8826-7854ab5f67ff.png
-- Source: https://github.com/catppuccin/nvim/discussions/323#discussioncomment-5287724
catppuccin_opts.gruvbox_material = {
  background = {
    light = "latte",
    dark = "mocha",
  },
  color_overrides = {
    latte = {
      rosewater = "#c14a4a",
      flamingo = "#c14a4a",
      red = "#c14a4a",
      maroon = "#c14a4a",
      pink = "#945e80",
      mauve = "#945e80",
      peach = "#c35e0a",
      yellow = "#b47109",
      green = "#6c782e",
      teal = "#4c7a5d",
      sky = "#4c7a5d",
      sapphire = "#4c7a5d",
      blue = "#45707a",
      lavender = "#45707a",
      text = "#654735",
      subtext1 = "#73503c",
      subtext0 = "#805942",
      overlay2 = "#8c6249",
      overlay1 = "#8c856d",
      overlay0 = "#a69d81",
      surface2 = "#bfb695",
      surface1 = "#d1c7a3",
      surface0 = "#e3dec3",
      base = "#f9f5d7",
      mantle = "#f0ebce",
      crust = "#e8e3c8",
    },
    mocha = {
      rosewater = "#ea6962",
      flamingo = "#ea6962",
      red = "#ea6962",
      maroon = "#ea6962",
      pink = "#d3869b",
      mauve = "#d3869b",
      peach = "#e78a4e",
      yellow = "#d8a657",
      green = "#a9b665",
      teal = "#89b482",
      sky = "#89b482",
      sapphire = "#89b482",
      blue = "#7daea3",
      lavender = "#7daea3",
      text = "#ebdbb2",
      subtext1 = "#d5c4a1",
      subtext0 = "#bdae93",
      overlay2 = "#a89984",
      overlay1 = "#928374",
      overlay0 = "#595959",
      surface2 = "#4d4d4d",
      surface1 = "#404040",
      surface0 = "#292929",
      base = "#1d2021",
      mantle = "#191b1c",
      crust = "#141617",
    },
  },
  transparent_background = false,
  show_end_of_buffer = false,
  integration_default = false,
  integrations = {
    barbecue = { dim_dirname = true, bold_basename = true, dim_context = false, alt_background = false },
    cmp = true,
    gitsigns = true,
    hop = true,
    illuminate = { enabled = true },
    native_lsp = { enabled = true, inlay_hints = { background = true } },
    neogit = true,
    neotree = true,
    semantic_tokens = true,
    treesitter = true,
    treesitter_context = true,
    vimwiki = true,
    which_key = true,
  },
  highlight_overrides = {
    all = function(colors)
      return {
        CmpItemMenu = { fg = colors.surface2 },
        CursorLineNr = { fg = colors.text },
        FloatBorder = { bg = colors.base, fg = colors.surface0 },
        GitSignsChange = { fg = colors.peach },
        LineNr = { fg = colors.overlay0 },
        LspInfoBorder = { link = "FloatBorder" },
        NeoTreeDirectoryIcon = { fg = colors.subtext1 },
        NeoTreeDirectoryName = { fg = colors.subtext1 },
        NeoTreeFloatBorder = { link = "TelescopeResultsBorder" },
        NeoTreeGitConflict = { fg = colors.red },
        NeoTreeGitDeleted = { fg = colors.red },
        NeoTreeGitIgnored = { fg = colors.overlay0 },
        NeoTreeGitModified = { fg = colors.peach },
        NeoTreeGitStaged = { fg = colors.green },
        NeoTreeGitUnstaged = { fg = colors.red },
        NeoTreeGitUntracked = { fg = colors.green },
        NeoTreeIndent = { fg = colors.surface1 },
        NeoTreeNormal = { bg = colors.mantle },
        NeoTreeNormalNC = { bg = colors.mantle },
        NeoTreeRootName = { fg = colors.subtext1, style = { "bold" } },
        NeoTreeTabActive = { fg = colors.text, bg = colors.mantle },
        NeoTreeTabInactive = { fg = colors.surface2, bg = colors.crust },
        NeoTreeTabSeparatorActive = { fg = colors.mantle, bg = colors.mantle },
        NeoTreeTabSeparatorInactive = { fg = colors.crust, bg = colors.crust },
        NeoTreeWinSeparator = { fg = colors.base, bg = colors.base },
        NormalFloat = { bg = colors.base },
        Pmenu = { bg = colors.mantle, fg = "" },
        PmenuSel = { bg = colors.surface0, fg = "" },
        TelescopePreviewBorder = { bg = colors.crust, fg = colors.crust },
        TelescopePreviewNormal = { bg = colors.crust },
        TelescopePreviewTitle = { fg = colors.crust, bg = colors.crust },
        TelescopePromptBorder = { bg = colors.surface0, fg = colors.surface0 },
        TelescopePromptCounter = { fg = colors.mauve, style = { "bold" } },
        TelescopePromptNormal = { bg = colors.surface0 },
        TelescopePromptPrefix = { bg = colors.surface0 },
        TelescopePromptTitle = { fg = colors.surface0, bg = colors.surface0 },
        TelescopeResultsBorder = { bg = colors.mantle, fg = colors.mantle },
        TelescopeResultsNormal = { bg = colors.mantle },
        TelescopeResultsTitle = { fg = colors.mantle, bg = colors.mantle },
        TelescopeSelection = { bg = colors.surface0 },
        VertSplit = { bg = colors.base, fg = colors.surface0 },
        WhichKeyFloat = { bg = colors.mantle },
        YankHighlight = { bg = colors.surface2 },
        FidgetTask = { fg = colors.subtext2 },
        FidgetTitle = { fg = colors.peach },

        IblIndent = { fg = colors.surface0 },
        IblScope = { fg = colors.overlay0 },

        Boolean = { fg = colors.mauve },
        Number = { fg = colors.mauve },
        Float = { fg = colors.mauve },

        PreProc = { fg = colors.mauve },
        PreCondit = { fg = colors.mauve },
        Include = { fg = colors.mauve },
        Define = { fg = colors.mauve },
        Conditional = { fg = colors.red },
        Repeat = { fg = colors.red },
        Keyword = { fg = colors.red },
        Typedef = { fg = colors.red },
        Exception = { fg = colors.red },
        Statement = { fg = colors.red },

        Error = { fg = colors.red },
        StorageClass = { fg = colors.peach },
        Tag = { fg = colors.peach },
        Label = { fg = colors.peach },
        Structure = { fg = colors.peach },
        Operator = { fg = colors.peach },
        Title = { fg = colors.peach },
        Special = { fg = colors.yellow },
        SpecialChar = { fg = colors.yellow },
        Type = { fg = colors.yellow, style = { "bold" } },
        Function = { fg = colors.green, style = { "bold" } },
        Delimiter = { fg = colors.subtext2 },
        Ignore = { fg = colors.subtext2 },
        Macro = { fg = colors.teal },

        TSAnnotation = { fg = colors.mauve },
        TSAttribute = { fg = colors.mauve },
        TSBoolean = { fg = colors.mauve },
        TSCharacter = { fg = colors.teal },
        TSCharacterSpecial = { link = "SpecialChar" },
        TSComment = { link = "Comment" },
        TSConditional = { fg = colors.red },
        TSConstBuiltin = { fg = colors.mauve },
        TSConstMacro = { fg = colors.mauve },
        TSConstant = { fg = colors.text },
        TSConstructor = { fg = colors.green },
        TSDebug = { link = "Debug" },
        TSDefine = { link = "Define" },
        TSEnvironment = { link = "Macro" },
        TSEnvironmentName = { link = "Type" },
        TSError = { link = "Error" },
        TSException = { fg = colors.red },
        TSField = { fg = colors.blue },
        TSFloat = { fg = colors.mauve },
        TSFuncBuiltin = { fg = colors.green },
        TSFuncMacro = { fg = colors.green },
        TSFunction = { fg = colors.green },
        TSFunctionCall = { fg = colors.green },
        TSInclude = { fg = colors.red },
        TSKeyword = { fg = colors.red },
        TSKeywordFunction = { fg = colors.red },
        TSKeywordOperator = { fg = colors.peach },
        TSKeywordReturn = { fg = colors.red },
        TSLabel = { fg = colors.peach },
        TSLiteral = { link = "String" },
        TSMath = { fg = colors.blue },
        TSMethod = { fg = colors.green },
        TSMethodCall = { fg = colors.green },
        TSNamespace = { fg = colors.yellow },
        TSNone = { fg = colors.text },
        TSNumber = { fg = colors.mauve },
        TSOperator = { fg = colors.peach },
        TSParameter = { fg = colors.text },
        TSParameterReference = { fg = colors.text },
        TSPreProc = { link = "PreProc" },
        TSProperty = { fg = colors.blue },
        TSPunctBracket = { fg = colors.text },
        TSPunctDelimiter = { link = "Delimiter" },
        TSPunctSpecial = { fg = colors.blue },
        TSRepeat = { fg = colors.red },
        TSStorageClass = { fg = colors.peach },
        TSStorageClassLifetime = { fg = colors.peach },
        TSStrike = { fg = colors.subtext2 },
        TSString = { fg = colors.teal },
        TSStringEscape = { fg = colors.green },
        TSStringRegex = { fg = colors.green },
        TSStringSpecial = { link = "SpecialChar" },
        TSSymbol = { fg = colors.text },
        TSTag = { fg = colors.peach },
        TSTagAttribute = { fg = colors.green },
        TSTagDelimiter = { fg = colors.green },
        TSText = { fg = colors.green },
        TSTextReference = { link = "Constant" },
        TSTitle = { link = "Title" },
        TSTodo = { link = "Todo" },
        TSType = { fg = colors.yellow, style = { "bold" } },
        TSTypeBuiltin = { fg = colors.yellow, style = { "bold" } },
        TSTypeDefinition = { fg = colors.yellow, style = { "bold" } },
        TSTypeQualifier = { fg = colors.peach, style = { "bold" } },
        TSURI = { fg = colors.blue },
        TSVariable = { fg = colors.text },
        TSVariableBuiltin = { fg = colors.mauve },

        ["@annotation"] = { link = "TSAnnotation" },
        ["@attribute"] = { link = "TSAttribute" },
        ["@boolean"] = { link = "TSBoolean" },
        ["@character"] = { link = "TSCharacter" },
        ["@character.special"] = { link = "TSCharacterSpecial" },
        ["@comment"] = { link = "TSComment" },
        ["@conceal"] = { link = "Grey" },
        ["@conditional"] = { link = "TSConditional" },
        ["@constant"] = { link = "TSConstant" },
        ["@constant.builtin"] = { link = "TSConstBuiltin" },
        ["@constant.macro"] = { link = "TSConstMacro" },
        ["@constructor"] = { link = "TSConstructor" },
        ["@debug"] = { link = "TSDebug" },
        ["@define"] = { link = "TSDefine" },
        ["@error"] = { link = "TSError" },
        ["@exception"] = { link = "TSException" },
        ["@field"] = { link = "TSField" },
        ["@float"] = { link = "TSFloat" },
        ["@function"] = { link = "TSFunction" },
        ["@function.builtin"] = { link = "TSFuncBuiltin" },
        ["@function.call"] = { link = "TSFunctionCall" },
        ["@function.macro"] = { link = "TSFuncMacro" },
        ["@include"] = { link = "TSInclude" },
        ["@keyword"] = { link = "TSKeyword" },
        ["@keyword.function"] = { link = "TSKeywordFunction" },
        ["@keyword.operator"] = { link = "TSKeywordOperator" },
        ["@keyword.return"] = { link = "TSKeywordReturn" },
        ["@label"] = { link = "TSLabel" },
        ["@math"] = { link = "TSMath" },
        ["@method"] = { link = "TSMethod" },
        ["@method.call"] = { link = "TSMethodCall" },
        ["@namespace"] = { link = "TSNamespace" },
        ["@none"] = { link = "TSNone" },
        ["@number"] = { link = "TSNumber" },
        ["@operator"] = { link = "TSOperator" },
        ["@parameter"] = { link = "TSParameter" },
        ["@parameter.reference"] = { link = "TSParameterReference" },
        ["@preproc"] = { link = "TSPreProc" },
        ["@property"] = { link = "TSProperty" },
        ["@punctuation.bracket"] = { link = "TSPunctBracket" },
        ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
        ["@punctuation.special"] = { link = "TSPunctSpecial" },
        ["@repeat"] = { link = "TSRepeat" },
        ["@storageclass"] = { link = "TSStorageClass" },
        ["@storageclass.lifetime"] = { link = "TSStorageClassLifetime" },
        ["@strike"] = { link = "TSStrike" },
        ["@string"] = { link = "TSString" },
        ["@string.escape"] = { link = "TSStringEscape" },
        ["@string.regex"] = { link = "TSStringRegex" },
        ["@string.special"] = { link = "TSStringSpecial" },
        ["@symbol"] = { link = "TSSymbol" },
        ["@tag"] = { link = "TSTag" },
        ["@tag.attribute"] = { link = "TSTagAttribute" },
        ["@tag.delimiter"] = { link = "TSTagDelimiter" },
        ["@text"] = { link = "TSText" },
        ["@text.danger"] = { link = "TSDanger" },
        ["@text.diff.add"] = { link = "diffAdded" },
        ["@text.diff.delete"] = { link = "diffRemoved" },
        ["@text.emphasis"] = { link = "TSEmphasis" },
        ["@text.environment"] = { link = "TSEnvironment" },
        ["@text.environment.name"] = { link = "TSEnvironmentName" },
        ["@text.literal"] = { link = "TSLiteral" },
        ["@text.math"] = { link = "TSMath" },
        ["@text.note"] = { link = "TSNote" },
        ["@text.reference"] = { link = "TSTextReference" },
        ["@text.strike"] = { link = "TSStrike" },
        ["@text.strong"] = { link = "TSStrong" },
        ["@text.title"] = { link = "TSTitle" },
        ["@text.todo"] = { link = "TSTodo" },
        ["@text.todo.checked"] = { link = "Green" },
        ["@text.todo.unchecked"] = { link = "Ignore" },
        ["@text.underline"] = { link = "TSUnderline" },
        ["@text.uri"] = { link = "TSURI" },
        ["@text.warning"] = { link = "TSWarning" },
        ["@todo"] = { link = "TSTodo" },
        ["@type"] = { link = "TSType" },
        ["@type.builtin"] = { link = "TSTypeBuiltin" },
        ["@type.definition"] = { link = "TSTypeDefinition" },
        ["@type.qualifier"] = { link = "TSTypeQualifier" },
        ["@uri"] = { link = "TSURI" },
        ["@variable"] = { link = "TSVariable" },
        ["@variable.builtin"] = { link = "TSVariableBuiltin" },

        ["@lsp.type.class"] = { link = "TSType" },
        ["@lsp.type.comment"] = { link = "TSComment" },
        ["@lsp.type.decorator"] = { link = "TSFunction" },
        ["@lsp.type.enum"] = { link = "TSType" },
        ["@lsp.type.enumMember"] = { link = "TSProperty" },
        ["@lsp.type.events"] = { link = "TSLabel" },
        ["@lsp.type.function"] = { link = "TSFunction" },
        ["@lsp.type.interface"] = { link = "TSType" },
        ["@lsp.type.keyword"] = { link = "TSKeyword" },
        ["@lsp.type.macro"] = { link = "TSConstMacro" },
        ["@lsp.type.method"] = { link = "TSMethod" },
        ["@lsp.type.modifier"] = { link = "TSTypeQualifier" },
        ["@lsp.type.namespace"] = { link = "TSNamespace" },
        ["@lsp.type.number"] = { link = "TSNumber" },
        ["@lsp.type.operator"] = { link = "TSOperator" },
        ["@lsp.type.parameter"] = { link = "TSParameter" },
        ["@lsp.type.property"] = { link = "TSProperty" },
        ["@lsp.type.regexp"] = { link = "TSStringRegex" },
        ["@lsp.type.string"] = { link = "TSString" },
        ["@lsp.type.struct"] = { link = "TSType" },
        ["@lsp.type.type"] = { link = "TSType" },
        ["@lsp.type.typeParameter"] = { link = "TSTypeDefinition" },
        ["@lsp.type.variable"] = { link = "TSVariable" },
      }
    end,
    latte = function(colors)
      return {
        IblIndent = { fg = colors.mantle },
        IblScope = { fg = colors.surface1 },

        LineNr = { fg = colors.surface1 },
      }
    end,
  },
}

-- Green
-- Source: https://github.com/catppuccin/nvim/discussions/323#discussioncomment-8361856
catppuccin_opts.adwaita = {
	no_italic = true,
	color_overrides = {
		all = {
			rosewater = '#f66151',
			flamingo = '#c061cb',
			pink = '#c061cb',
			mauve = '#c061cb',
			red = '#e01b24',
			maroon = '#f66151',
			peach = '#ffa348',
			yellow = '#F5C211',
			green = '#33d17a',
			teal = '#54DBF6',
			sky = '#62a0ea',
			sapphire = '#62a0ea',
			blue = '#62a0ea',
			lavender = '#c061cb',
			text = '#ffffff',
			subtext1 = '#deddda',
			subtext0 = '#c0bfbc',
			overlay2 = '#858585',
			overlay1 = '#737373',
			overlay0 = '#616161',
			surface2 = '#4f4f4f',
			surface1 = '#3e3e3e',
			surface0 = '#2e2e2e',
			base = '#1E1E1E',
			mantle = '#1A1A1A',
			crust = '#101010'
		}
	},
	custom_highlights = function(colors)
		return {
			LineNr = {fg = colors.surface1},
			CursorLineNr = {fg = colors.overlay2},
			CursorLine = {bg = '#252525'},
			ColorColumn = {bg = '#252525'},
			Visual = {bg = colors.surface1},
			MsgArea = {fg = colors.subtext0},
			TabLine = {bg = colors.mantle},
			TabLineFill = {bg = colors.mantle},
			TabLineSel = {fg = colors.subtext0, bg = colors.base},

			GitSignsAdd = {fg = '#467555'},
			GitSignsChange = {fg = '#856f3a'},
			GitSignsDelete = {fg = '#753b34'},
			TelescopeBorder = {fg = colors.subtext0},

			Constant = {fg = colors.blue},
			String = {fg = colors.subtext0},
			Character = {fg = colors.subtext0},
			Number = {fg = colors.blue},
			Boolean = {fg = colors.blue},
			Float = {fg = colors.blue},
			Identifier = {fg = colors.green},
			Function = {fg = colors.green},
			Statement = {fg = colors.green},
			Conditional = {fg = colors.green},
			Repeat = {fg = colors.green},
			Label = {fg = colors.green},
			Operator = {fg = colors.subtext0},
			Keyword = {fg = colors.green},
			Exception = {fg = colors.green},
			PreProc = {fg = colors.yellow},
			Include = {fg = colors.yellow},
			Define = {fg = colors.yellow},
			Macro = {fg = colors.yellow},
			PreCondit = {fg = colors.yellow},
			Type = {fg = colors.blue},
			StorageClass = {fg = colors.overlay2},
			Structure = {fg = colors.subtext0},
			Special = {fg = colors.overlay2},
			SpecialChar = {fg = colors.overlay2}
		}
	end
}

-- High contrast cyan
-- Source: https://github.com/catppuccin/nvim/discussions/323#discussioncomment-8653291
catppuccin_opts.pkazmier = {
  highlight_overrides = {
    all = function(colors)
      return {
        CurSearch = { bg = colors.sky },
        IncSearch = { bg = colors.sky },
        CursorLineNr = { fg = colors.blue, style = { "bold" } },
        DashboardFooter = { fg = colors.overlay0 },
        TreesitterContextBottom = { style = {} },
        WinSeparator = { fg = colors.overlay0, style = { "bold" } },
        ["@markup.italic"] = { fg = colors.blue, style = { "italic" } },
        ["@markup.strong"] = { fg = colors.blue, style = { "bold" } },
        Headline = { style = { "bold" } },
        Headline1 = { fg = colors.blue, style = { "bold" } },
        Headline2 = { fg = colors.pink, style = { "bold" } },
        Headline3 = { fg = colors.lavender, style = { "bold" } },
        Headline4 = { fg = colors.green, style = { "bold" } },
        Headline5 = { fg = colors.peach, style = { "bold" } },
        Headline6 = { fg = colors.flamingo, style = { "bold" } },
        rainbow1 = { fg = colors.blue, style = { "bold" } },
        rainbow2 = { fg = colors.pink, style = { "bold" } },
        rainbow3 = { fg = colors.lavender, style = { "bold" } },
        rainbow4 = { fg = colors.green, style = { "bold" } },
        rainbow5 = { fg = colors.peach, style = { "bold" } },
        rainbow6 = { fg = colors.flamingo, style = { "bold" } },
      }
    end,
  },
  color_overrides = {
    macchiato = {
      rosewater = "#F5B8AB",
      flamingo = "#F29D9D",
      pink = "#AD6FF7",
      mauve = "#FF8F40",
      red = "#E66767",
      maroon = "#EB788B",
      peach = "#FAB770",
      yellow = "#FACA64",
      green = "#70CF67",
      teal = "#4CD4BD",
      sky = "#61BDFF",
      sapphire = "#4BA8FA",
      blue = "#00BFFF",
      lavender = "#00BBCC",
      text = "#C1C9E6",
      subtext1 = "#A3AAC2",
      subtext0 = "#8E94AB",
      overlay2 = "#7D8296",
      overlay1 = "#676B80",
      overlay0 = "#464957",
      surface2 = "#3A3D4A",
      surface1 = "#2F313D",
      surface0 = "#1D1E29",
      base = "#0b0b12",
      mantle = "#11111a",
      crust = "#191926",
    },
  },
  integrations = {
    telescope = {
      enabled = true,
      style = "nvchad",
    },
  },
}

catppuccin_opts.plastilin_frappe = {
  background = {
    light = "latte",
    dark = "mocha",
  },
  color_overrides = {
    mocha = {
      rosewater = "#FB4834",
      flamingo = "#FB4834",
      red = "#FB4834",
      maroon = "#FB4834",
      pink = "#d3859b",
      mauve = "#d3859b",
      peach = "#e78a4e",
      yellow = "#FBBD2E",
      green = "#8dc07c",
      teal = "#B9BB25",
      sky = "#99c792",
      sapphire = "#99c792",
      blue = "#8dbba3",
      lavender = "#8dbba3",
      text = "#f1e4c2",
      subtext2 = "#c5b4a1",
      subtext1 = "#d5c4a1",
      subtext0 = "#bdae93",
      overlay2 = "#a89984",
      overlay1 = "#928374",
      overlay0 = "#595959",
      surface2 = "#4d4d4d",
      surface1 = "#404040",
      surface0 = "#292929",
      base = "#1d2224",
      mantle = "#1d2224",
      crust = "#1f2223",
    },
    frappe = {
      rosewater = "#eb7a73",
      flamingo = "#eb7a73",
      red = "#eb7a73",
      maroon = "#eb7a73",
      pink = "#e396a4",
      mauve = "#e396a4",
      peach = "#e89a5e",
      yellow = "#E7B84C",
      green = "#7cb66a",
      teal = "#99c792",
      sky = "#99c792",
      sapphire = "#99c792",
      blue = "#8dbba3",
      lavender = "#8dbba3",
      text = "#f1e4c2",
      subtext1 = "#e5d5b1",
      subtext0 = "#c5bda3",
      overlay2 = "#b8a994",
      overlay1 = "#a39284",
      overlay0 = "#656565",
      surface2 = "#5d5d5d",
      surface1 = "#505050",
      surface0 = "#393939",
      base = "#1d2224",
      mantle = "#1d2224",
      crust = "#1f2223",
    },
  },
  transparent_background = false,
  show_end_of_buffer = false,
  integration_default = false,
  integrations = {
    barbecue = { dim_dirname = true, bold_basename = true, dim_context = false, alt_background = false },
    cmp = true,
    gitsigns = true,
    hop = true,
    illuminate = { enabled = true },
    native_lsp = { enabled = true, inlay_hints = { background = true } },
    neogit = true,
    neotree = true,
    semantic_tokens = true,
    treesitter = true,
    treesitter_context = true,
    vimwiki = true,
    which_key = true,
  },
  highlight_overrides = {
    all = function(colors)
      return {
        CmpItemMenu = { fg = colors.surface2 },
        CursorLineNr = { fg = colors.text },
        FloatBorder = { bg = colors.base, fg = colors.subtext1 }, -- colors.surface0 }, difficult to see
        GitSignsChange = { fg = colors.peach },
        LineNr = { fg = colors.overlay0 },
        LspInfoBorder = { link = "FloatBorder" },
        NeoTreeDirectoryIcon = { fg = colors.subtext1 },
        NeoTreeDirectoryName = { fg = colors.subtext1 },
        NeoTreeFloatBorder = { bg = colors.mantle, fg = colors.mantle },
        NeoTreeGitConflict = { fg = colors.red },
        NeoTreeGitDeleted = { fg = colors.red },
        NeoTreeGitIgnored = { fg = colors.overlay0 },
        NeoTreeGitModified = { fg = colors.peach },
        NeoTreeGitStaged = { fg = colors.green },
        NeoTreeGitUnstaged = { fg = colors.red },
        NeoTreeGitUntracked = { fg = colors.green },
        NeoTreeIndent = { fg = colors.surface1 },
        NeoTreeNormal = { bg = colors.mantle },
        NeoTreeNormalNC = { bg = colors.mantle },
        NeoTreeRootName = { fg = colors.subtext1, style = { "bold" } },
        NeoTreeTabActive = { fg = colors.text, bg = colors.mantle },
        NeoTreeTabInactive = { fg = colors.surface2, bg = colors.crust },
        NeoTreeTabSeparatorActive = { fg = colors.mantle, bg = colors.mantle },
        NeoTreeTabSeparatorInactive = { fg = colors.crust, bg = colors.crust },
        NeoTreeWinSeparator = { fg = colors.surface1, bg = colors.base },
        NormalFloat = { bg = colors.base },
        Pmenu = { bg = colors.mantle, fg = "" },
        -- telescope prompt
        TelescopePromptTitle = { fg = colors.mantle, bg = "#39fd9c", style = { "bold" } },
        TelescopePromptCounter = { fg = colors.red, style = { "bold" } },
        TelescopePromptBorder = { bg = colors.base },
        -- telescope results
        TelescopeResultsTitle = { link = "TelescopePromptTitle" },
        TelescopeResultsBorder = { link = "TelescopePromptBorder" },
        -- telescope preview
        TelescopePreviewTitle = { link = "TelescopePromptTitle" },
        TelescopePreviewBorder = { link = "TelescopePromptBorder" },
        VertSplit = { bg = colors.base, fg = colors.surface0 },
        WhichKeyFloat = { bg = colors.mantle },
        YankHighlight = { bg = colors.surface2 },
        FidgetTask = { fg = colors.subtext2 },
        FidgetTitle = { fg = colors.peach },

        IblIndent = { fg = colors.surface0 },
        IblScope = { fg = colors.overlay0 },

        Boolean = { fg = colors.mauve },
        Number = { fg = colors.mauve },
        Float = { fg = colors.mauve },

        PreProc = { fg = colors.mauve },
        PreCondit = { fg = colors.mauve },
        Include = { fg = colors.mauve },
        Define = { fg = colors.mauve },
        Conditional = { fg = colors.red },
        Repeat = { fg = colors.red },
        Keyword = { fg = colors.red },
        Typedef = { fg = colors.red },
        Exception = { fg = colors.red },
        Statement = { fg = colors.red },

        Error = { fg = colors.red },
        StorageClass = { fg = colors.peach },
        Tag = { fg = colors.peach },
        Label = { fg = colors.peach },
        Structure = { fg = colors.peach },
        Operator = { fg = colors.sapphire },
        Title = { fg = colors.peach },
        Special = { fg = colors.yellow },
        SpecialChar = { fg = colors.yellow },
        Type = { fg = colors.yellow, style = { "bold" } },
        Function = { fg = colors.green, style = { "bold" } },
        Delimiter = { fg = colors.subtext2 },
        Ignore = { fg = colors.subtext2 },
        Macro = { fg = colors.teal },

        TSAnnotation = { fg = colors.mauve },
        TSAttribute = { fg = colors.mauve },
        TSBoolean = { fg = colors.mauve },
        TSCharacter = { fg = colors.teal },
        TSCharacterSpecial = { link = "SpecialChar" },
        TSComment = { link = "Comment" },
        TSConditional = { fg = colors.red },
        TSConstBuiltin = { fg = colors.mauve },
        TSConstMacro = { fg = colors.mauve },
        TSConstant = { fg = colors.text },
        TSConstructor = { fg = colors.green },
        TSDebug = { link = "Debug" },
        TSDefine = { link = "Define" },
        TSEnvironment = { link = "Macro" },
        TSEnvironmentName = { link = "Type" },
        TSError = { link = "Error" },
        TSException = { fg = colors.red },
        TSField = { fg = colors.blue },
        TSFloat = { fg = colors.mauve },
        TSFuncBuiltin = { fg = colors.green },
        TSFuncMacro = { fg = colors.green },
        TSFunction = { fg = colors.green },
        TSFunctionCall = { fg = colors.green },
        TSInclude = { fg = colors.red },
        TSKeyword = { fg = colors.red },
        TSKeywordFunction = { fg = colors.red },
        TSKeywordOperator = { fg = colors.sapphire },
        TSKeywordReturn = { fg = colors.red },
        TSLabel = { fg = colors.peach },
        TSLiteral = { link = "String" },
        TSMath = { fg = colors.blue },
        TSMethod = { fg = colors.green },
        TSMethodCall = { fg = colors.green },
        TSNamespace = { fg = colors.yellow },
        TSNone = { fg = colors.text },
        TSNumber = { fg = colors.mauve },
        -- TSOperator = { fg = colors.sapphire },
        TSOperator = { fg = colors.peach },
        TSParameter = { fg = colors.text },
        TSParameterReference = { fg = colors.text },
        TSPreProc = { link = "PreProc" },
        TSProperty = { fg = colors.blue },
        TSPunctBracket = { fg = colors.text },
        TSPunctDelimiter = { link = "Delimiter" },
        TSPunctSpecial = { fg = colors.blue },
        TSRepeat = { fg = colors.red },
        TSStorageClass = { fg = colors.peach },
        TSStorageClassLifetime = { fg = colors.peach },
        TSStrike = { fg = colors.subtext2 },
        TSString = { fg = colors.teal },
        TSStringEscape = { fg = colors.green },
        TSStringRegex = { fg = colors.green },
        TSStringSpecial = { link = "SpecialChar" },
        TSSymbol = { fg = colors.text },
        TSTag = { fg = colors.peach },
        TSTagAttribute = { fg = colors.green },
        TSTagDelimiter = { fg = colors.green },
        TSText = { fg = colors.green },
        TSTextReference = { link = "Constant" },
        TSTitle = { link = "Title" },
        TSTodo = { link = "Todo" },
        TSType = { fg = colors.yellow, style = { "bold" } },
        TSTypeBuiltin = { fg = colors.yellow, style = { "bold" } },
        TSTypeDefinition = { fg = colors.yellow, style = { "bold" } },
        TSTypeQualifier = { fg = colors.peach, style = { "bold" } },
        TSURI = { fg = colors.blue },
        TSVariable = { fg = colors.text },
        TSVariableBuiltin = { fg = colors.mauve },

        ["@annotation"] = { link = "TSAnnotation" },
        ["@attribute"] = { link = "TSAttribute" },
        ["@boolean"] = { link = "TSBoolean" },
        ["@character"] = { link = "TSCharacter" },
        ["@character.special"] = { link = "TSCharacterSpecial" },
        ["@comment"] = { link = "TSComment" },
        ["@conceal"] = { link = "Grey" },
        ["@conditional"] = { link = "TSConditional" },
        ["@constant"] = { link = "TSConstant" },
        ["@constant.builtin"] = { link = "TSConstBuiltin" },
        ["@constant.macro"] = { link = "TSConstMacro" },
        ["@constructor"] = { link = "TSConstructor" },
        ["@debug"] = { link = "TSDebug" },
        ["@define"] = { link = "TSDefine" },
        ["@error"] = { link = "TSError" },
        ["@exception"] = { link = "TSException" },
        ["@field"] = { link = "TSField" },
        ["@float"] = { link = "TSFloat" },
        ["@function"] = { link = "TSFunction" },
        ["@function.builtin"] = { link = "TSFuncBuiltin" },
        ["@function.call"] = { link = "TSFunctionCall" },
        ["@function.macro"] = { link = "TSFuncMacro" },
        ["@include"] = { link = "TSInclude" },
        ["@keyword"] = { link = "TSKeyword" },
        ["@keyword.function"] = { link = "TSKeywordFunction" },
        ["@keyword.operator"] = { link = "TSKeywordOperator" },
        ["@keyword.return"] = { link = "TSKeywordReturn" },
        ["@label"] = { link = "TSLabel" },
        ["@math"] = { link = "TSMath" },
        ["@method"] = { link = "TSMethod" },
        ["@method.call"] = { link = "TSMethodCall" },
        ["@namespace"] = { link = "TSNamespace" },
        ["@none"] = { link = "TSNone" },
        ["@number"] = { link = "TSNumber" },
        ["@operator"] = { link = "TSOperator" },
        ["@parameter"] = { link = "TSParameter" },
        ["@parameter.reference"] = { link = "TSParameterReference" },
        ["@preproc"] = { link = "TSPreProc" },
        ["@property"] = { link = "TSProperty" },
        ["@punctuation.bracket"] = { link = "TSPunctBracket" },
        ["@punctuation.delimiter"] = { link = "TSPunctDelimiter" },
        ["@punctuation.special"] = { link = "TSPunctSpecial" },
        ["@repeat"] = { link = "TSRepeat" },
        ["@storageclass"] = { link = "TSStorageClass" },
        ["@storageclass.lifetime"] = { link = "TSStorageClassLifetime" },
        ["@strike"] = { link = "TSStrike" },
        ["@string"] = { link = "TSString" },
        ["@string.escape"] = { link = "TSStringEscape" },
        ["@string.regex"] = { link = "TSStringRegex" },
        ["@string.special"] = { link = "TSStringSpecial" },
        ["@symbol"] = { link = "TSSymbol" },
        ["@tag"] = { link = "TSTag" },
        ["@tag.attribute"] = { link = "TSTagAttribute" },
        ["@tag.delimiter"] = { link = "TSTagDelimiter" },
        ["@text"] = { link = "TSText" },
        ["@text.danger"] = { link = "TSDanger" },
        ["@text.diff.add"] = { link = "diffAdded" },
        ["@text.diff.delete"] = { link = "diffRemoved" },
        ["@text.emphasis"] = { link = "TSEmphasis" },
        ["@text.environment"] = { link = "TSEnvironment" },
        ["@text.environment.name"] = { link = "TSEnvironmentName" },
        ["@text.literal"] = { link = "TSLiteral" },
        ["@text.math"] = { link = "TSMath" },
        ["@text.note"] = { link = "TSNote" },
        ["@text.reference"] = { link = "TSTextReference" },
        ["@text.strike"] = { link = "TSStrike" },
        ["@text.strong"] = { link = "TSStrong" },
        ["@text.title"] = { link = "TSTitle" },
        ["@text.todo"] = { link = "TSTodo" },
        ["@text.todo.checked"] = { link = "Green" },
        ["@text.todo.unchecked"] = { link = "Ignore" },
        ["@text.underline"] = { link = "TSUnderline" },
        ["@text.uri"] = { link = "TSURI" },
        ["@text.warning"] = { link = "TSWarning" },
        ["@todo"] = { link = "TSTodo" },
        ["@type"] = { link = "TSType" },
        ["@type.builtin"] = { link = "TSTypeBuiltin" },
        ["@type.definition"] = { link = "TSTypeDefinition" },
        ["@type.qualifier"] = { link = "TSTypeQualifier" },
        ["@uri"] = { link = "TSURI" },
        ["@variable"] = { link = "TSVariable" },
        ["@variable.builtin"] = { link = "TSVariableBuiltin" },

        ["@lsp.type.class"] = { link = "TSType" },
        ["@lsp.type.comment"] = { link = "TSComment" },
        ["@lsp.type.decorator"] = { link = "TSFunction" },
        ["@lsp.type.enum"] = { link = "TSType" },
        ["@lsp.type.enumMember"] = { link = "TSProperty" },
        ["@lsp.type.events"] = { link = "TSLabel" },
        ["@lsp.type.function"] = { link = "TSFunction" },
        ["@lsp.type.interface"] = { link = "TSType" },
        ["@lsp.type.keyword"] = { link = "TSKeyword" },
        ["@lsp.type.macro"] = { link = "TSConstMacro" },
        ["@lsp.type.method"] = { link = "TSMethod" },
        ["@lsp.type.modifier"] = { link = "TSTypeQualifier" },
        ["@lsp.type.namespace"] = { link = "TSNamespace" },
        ["@lsp.type.number"] = { link = "TSNumber" },
        ["@lsp.type.operator"] = { link = "TSOperator" },
        ["@lsp.type.parameter"] = { link = "TSParameter" },
        ["@lsp.type.property"] = { link = "TSProperty" },
        ["@lsp.type.regexp"] = { link = "TSStringRegex" },
        ["@lsp.type.string"] = { link = "TSString" },
        ["@lsp.type.struct"] = { link = "TSType" },
        ["@lsp.type.type"] = { link = "TSType" },
        ["@lsp.type.typeParameter"] = { link = "TSTypeDefinition" },
        ["@lsp.type.variable"] = { link = "TSVariable" },
      }
    end,
    latte = function(colors)
      return {
        IblIndent = { fg = colors.mantle },
        IblScope = { fg = colors.surface1 },

        LineNr = { fg = colors.surface1 },
      }
    end,
  },
}

---@type table<string, profiles.Profile.Appearence.Theme>
---@diagnostic disable-next-line: unused-local
local themes = {
  catppuccin_vkz = {
    colorscheme = "catppuccin",
    theme_config = function (plugin)
      if type(plugin.setup) == "function" then
        plugin.setup(catppuccin_opts.plastilin_frappe_vkz)
      end
    end
  },
}

local function neovide()
  vim.g.neovide_theme = "auto"
  vim.o.guifont = "CaskaydiaCove Nerd Font"
  vim.g.neovide_opacity = 0.6
  vim.g.neovide_normal_opacity = 0.6
  vim.g.neovide_hide_mouse_when_typing = true
  vim.g.neovide_remember_window_size = true
  if default.preference.os == options.System.Windows then
    vim.api.nvim_create_autocmd({ "ColorScheme" }, {
      group = vkzlib.vim.augroup("neovide", "windows_title_bar"),
      pattern = "*",
      callback = function ()
        vim.g.neovide_title_text_color = string.format(
          "%x",
          vim.api.nvim_get_hl(0, {id=vim.api.nvim_get_hl_id_by_name("Normal")}).fg
        )
        vim.g.neovide_title_background_color = string.format(
          "%x",
          vim.api.nvim_get_hl(0, {id=vim.api.nvim_get_hl_id_by_name("Normal")}).bg
        )
      end
    })
  end
  vim.api.nvim_create_autocmd({ "VimEnter" }, {
    group = vkzlib.vim.augroup("neovide", "toggle_fullscreen_keymap"),
    pattern = "*",
    callback = function ()
      vim.keymap.set({ "n", "v" }, "<F11>", function ()
        vim.g.neovide_fullscreen = vim.g.neovide_fullscreen == nil and true or not vim.g.neovide_fullscreen
      end)
    end
  })
end

---@type profiles.Profile
local profile = {
  ---@type profiles.Profile.Preference
  preference = {
    use_mason = true,
    use_ai = true,
    mouse = "",
    enable_discord_rich_presence = true,
    config_neovide = neovide,
  },
  ---@type profiles.Profile.Appearence
  appearence = {
    ---@type profiles.Profile.Appearence.Theme
    theme = options.Themes.catppuccin
  },
  ---@type profiles.Profile.Editor
  editor = {
    tab_size = 2,
  },
  ---@type profiles.Profile.Languages
  languages = {
    ---@type table<string | string[], profiles.Profile.Languages.Language>
    custom = {
      angular = {
        enable = true,
      },
      [{ "c", "cpp" }] = {
        enable = true,
      },
      cmake = {
        enable = true,
      },
      haskell = {
        enable = true,
      },
      json = {
        enable = true,
      },
      markdown = {
        enable = true
      },
      lua = {
        enable = true,
      },
      python = {
        enable = true,
      },
      ps1 = {
        enable = false
      },
      [{ "bash", "sh" }] = {
        enable = false,
      },
      rust = {
        enable = true,
      },
      typescript = {
        enable = true,
      },
      yaml = {
        enable = true,
      }
    },
  },
  ---@type profiles.Profile.Debugging
  debugging = {
    log_level = vim.log.levels.DEBUG
  },
}

return profile
